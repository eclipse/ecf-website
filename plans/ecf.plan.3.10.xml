<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<?xml-stylesheet type="text/xsl" href="http://www.eclipse.org/projects/project-plan.xsl"?>
<plan plan-format="1.0" xmlns="http://www.eclipse.org/project/plan"
	xmlns:html="http://www.w3.org/1999/xhtml" name="Eclipse Communication Framework">
	<release projectid="rt.ecf" version="3.10" />
	<introduction>
		<html:div>
			<html:p>
			    ECF released version 3.9.0 as part of the <html:a href="https://wiki.eclipse.org/Luna">Luna Simultaneous Release</html:a>, and in August 2014 
			    ECF <html:a href="http://www.eclipse.org/ecf/downloads.php">released version 3.9.1</html:a>.  
			    The plan below describes the intended work for ECF 3.10, which will occur on or before the <html:a href="https://wiki.eclipse.org/Mars">Mars Simultaneous Release</html:a> scheduled 
			    for June 2015.
			</html:p>
		</html:div>
	</introduction>
	<release_deliverables>
		<html:div>
			<html:p>
				The major ECF 3.10 release deliverables are as follows:
			</html:p>
		</html:div>
	</release_deliverables>
	<release_milestones>
		<preamble>
			<html:div>
			No milestones.
			</html:div>
		</preamble>
		<milestone date="6/24/2014" milestone="3.10.0">
			<html:div>ECF 3.10.0 release</html:div>
		</milestone>
		<postamble>
			<html:div></html:div>
		</postamble>
	</release_milestones>
	<target_environments>
		<html:div>
			ECF's target environments are:
			<html:ul>
				<html:li>Eclipse Tools and Eclipse-based tooling/products</html:li>
				<html:li>Eclipse-based Applications</html:li>
				<html:li>Eclipse RCP-based Applications</html:li>
				<html:li>Equinox servers</html:li>
				<html:li>Karaf-based servers</html:li>
			</html:ul>
		</html:div>
		<internationalization>
			<html:div>ECF doesn't perform internationalization directly, although
				we develop our plugins following
				common rules about string externalization to make the automation possible
			</html:div>
		</internationalization>
	</target_environments>
	<compatibility_with_previous_releases>
		<html:div>
			<html:p>
				ECF has a policy of maintaining API backward compatibility with
				minor and service releases. API is considered all
				exported packages (i.e. packages that do not have
				<html:pre>x-internal:=true</html:pre>
				in their Export-Package declaration. As an example,
				with the following declaration in the org.eclipse.ecf MANIFEST.MF
			</html:p>
			<html:pre>Export-Package: org.eclipse.ecf.core,
				org.eclipse.ecf.internal.core;x-internal:=true
       </html:pre>
			<html:p>The org.eclipse.ecf.core package is API, and the
				org.eclipse.ecf.internal.core package is not</html:p>
			<html:p>Only with major releases (e.g. 2.0.0, 3.0.0) are incompatible
				API changes to be introduced (e.g. refactorings, renames), and even
				then only after discussion
				among multiple committers. For the parts of ECF used by the Platform
				(e.g. the core and file transfer bundles), NO incompatible
				API changes will be introduced, even for major releases, in order to
				maintain the platform backward compatibility
				constraints.</html:p>
		</html:div>
	</compatibility_with_previous_releases>
	<themes_and_priorities>
		<preamble>
			<html:div></html:div>
		</preamble>
		<theme name="Tooling for ECF Remote Services">
			<description>
				<html:p>Consumers of ECF Remote Services can/could benefit from the creation of Eclipse-based tooling for declaring, implementing, testing,
				 debugging, deploying, monitoring, and managing Remote Services.  A major theme for ECF will be creation of tooling to ease the burden on the 
				 consumer of ECF's Remote Services implementation.
				</html:p>
			</description>
		</theme>
		<theme name="ECF Providers">
			<description>
				<html:p>Add support for Servlet/HttpService-based remote service providers
    			</html:p>
			</description>
		</theme>
	</themes_and_priorities>
</plan>